name: CI

on: [push, pull_request]

env:
  BUILD_TYPE: Release

jobs:
  build:
    strategy:
      matrix:
        config:
          - { name: "Linux"  , os: ubuntu-latest , llvm: "linux-gnu-ubuntu-20.04", llvm-ext: ".tar.xz", tc: "linux-ubuntu14", tc-ext: ".tar.gz", unpack: "tar xf" }
          - { name: "Windows", os: windows-latest, llvm: ""                      , llvm-ext: ""       , tc: "w64-mingw32"   , tc-ext: ".zip"   , unpack: "unzip"  }
          # - { name: "Mac"    , os: macos-10.15   , llvm: "apple-darwin"          , llvm-ext: ".tar.xz", tc: "apple-darwin"  , tc-ext: ".tar.gz", unpack: "tar xf" }

    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}_build

    steps:
    - uses: actions/checkout@v2

    - name: Requirements (Linux)
      if: matrix.config.name == 'Linux'
      run: |
        sudo apt-get install libboost-system-dev libboost-filesystem-dev libboost-program-options-dev

    - name: Requirements (Windows)
      if: matrix.config.name == 'Windows'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        choco install boost-msvc-14.2
        choco install wget unzip
        choco install make

    - name: Requirements (Mac)
      if: matrix.config.name == 'Mac'
      run: |
        brew install boost coreutils

    - name: Requirements (Linux/Mac)
      if: matrix.config.name == 'Linux' || matrix.config.name == 'Mac'
      working-directory: ${{runner.workspace}}
      shell: bash
      run: |
        LLVM_NAME="clang+llvm-11.0.0-x86_64-${{ matrix.config.llvm }}"
        wget https://github.com/llvm/llvm-project/releases/download/llvmorg-11.0.0/$LLVM_NAME${{ matrix.config.llvm-ext }}
        ${{ matrix.config.unpack }} $LLVM_NAME${{ matrix.config.llvm-ext }}
        mv $LLVM_NAME llvm-lib

    - name: Requirements
      shell: bash
      working-directory: ${{runner.workspace}}
      run: |
        TC_NAME="riscv64-unknown-elf-toolchain-10.2.0-2020.12.8-x86_64-${{ matrix.config.tc }}"
        wget https://static.dev.sifive.com/dev-tools/freedom-tools/v2020.12/$TC_NAME${{ matrix.config.tc-ext }}
        ${{ matrix.config.unpack }} $TC_NAME${{ matrix.config.tc-ext }}
        mv $TC_NAME riscv-tc

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        export LLVM_DIR=${{runner.workspace}}/llvm-lib
        WORKSPACE="${{runner.workspace}}"
        WORKSPACE_U=${WORKSPACE//\\//}
        cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_INSTALL_PREFIX=../install -DEXAMPLES_BUILD_RISCV=ON -DRISCV_TOOLCHAIN_PREFIX=$WORKSPACE_U/riscv-tc

    - name: Build
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Install
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target install

    - name: Compress Compiled System
      run: tar -C ${{runner.workspace}} -cvf ${{runner.workspace}}/etiss.tar install

    - name: Upload Compiled System
      uses: actions/upload-artifact@v2
      with:
        name: etiss-${{matrix.config.name}}.tar
        path: ${{runner.workspace}}/etiss.tar

  test:
    strategy:
      matrix:
        config:
          - { name: "Linux"  , os: ubuntu-latest , has_gcc: true , has_llvm: true  }
          - { name: "Windows", os: windows-latest, has_gcc: false, has_llvm: false }
          # - { name: "Mac"    , os: macos-10.15   , has_gcc: true , has_llvm: true }

    needs: build
    runs-on: ${{ matrix.config.os }}
    name: ${{ matrix.config.name }}_test

    steps:
    - name: Fetch Compiled System
      uses: actions/download-artifact@v2
      with:
        name: etiss-${{matrix.config.name}}.tar
        path: ${{runner.workspace}}

    - name: Unpack Compiled System
      working-directory: ${{runner.workspace}}
      run: tar -xf etiss.tar

    - name: Test
      working-directory: ${{runner.workspace}}/install
      shell: bash
      run: |
        # run tests

        # add install/lib to path so ETISS.dll is found on windows
        export PATH=$PATH:`pwd`/lib
        
        bin/run_helper.sh  examples/SW/rv32gc/bin/test_cases   config examples/SW/rv32gc/etc/memsegs.ini  tcc
        bin/run_helper.sh  examples/SW/rv32gc/bin/example_cpp  config examples/SW/rv32gc/etc/memsegs.ini  tcc

        if ${{matrix.config.has_llvm}}; then # find package does not find llvm on windows
        bin/run_helper.sh  examples/SW/rv32gc/bin/test_cases   config examples/SW/rv32gc/etc/memsegs.ini  llvm
        bin/run_helper.sh  examples/SW/rv32gc/bin/example_cpp  config examples/SW/rv32gc/etc/memsegs.ini  llvm
        fi

        if ${{matrix.config.has_gcc}}; then # gcc is not available on windows
        bin/run_helper.sh  examples/SW/rv32gc/bin/test_cases   config examples/SW/rv32gc/etc/memsegs.ini  gcc
        bin/run_helper.sh  examples/SW/rv32gc/bin/example_cpp  config examples/SW/rv32gc/etc/memsegs.ini  gcc
        fi

        # run tests on 64-bit RISC-V as well
        bin/run_helper.sh  examples/SW/rv64gc/bin/test_cases   config examples/SW/rv64gc/etc/memsegs.ini
        bin/run_helper.sh  examples/SW/rv64gc/bin/example_cpp  config examples/SW/rv64gc/etc/memsegs.ini

  benchmark:
    strategy:
      matrix:
        run-no: [1, 2, 3, 4, 5]
        jit-engine: ["tcc", "gcc", "llvm"]

    if: (github.event_name == 'push' && github.ref == 'refs/heads/master') || github.event_name == 'pull_request'
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Fetch Compiled System
      uses: actions/download-artifact@v2
      with:
        name: etiss-Linux.tar
        path: ${{runner.workspace}}

    - name: Unpack Compiled System
      working-directory: ${{runner.workspace}}
      run: tar -xf etiss.tar

    - name: create directory to store results
      working-directory: ${{runner.workspace}}
      run: mkdir ${{runner.workspace}}/results

    - name: Run Benchmarks
      working-directory: ${{runner.workspace}}/install
      run: |
        bin/run_helper.sh examples/SW/rv32gc/bin/dhry config examples/SW/rv32gc/etc/memsegs.ini ${{matrix.jit-engine}} --vp.stats_file_path=${{runner.workspace}}/results/run.json
        mv ${{runner.workspace}}/results/run.json ${{runner.workspace}}/results/run_${{matrix.jit-engine}}_${{matrix.run-no}}.json

    - name: Save Benchmark Results
      uses: actions/upload-artifact@v2
      with:
        name: run_${{matrix.jit-engine}}_${{matrix.run-no}}.json
        path: ${{runner.workspace}}/results/run_${{matrix.jit-engine}}_${{matrix.run-no}}.json

  compare_mips:
    needs: benchmark
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Fetch results
        uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Prepare files
        run: |
          rm -rf benchmark_results_new
          mkdir benchmark_results_new
          find artifacts -type f -name '*.json' -exec mv {} benchmark_results_new \;
          find artifacts -type f -name '*.tar' -exec mv {} . \;

      - name: install dependencies
        run: pip install -r script/requirements.txt

      - name: get old benchmark results
        uses: actions/checkout@v2
        with:
          ref: benchmark_results
          path: benchmark_results_old

      - name: creating a directory results_ for storing wiki text, issue text and the graph
        run: |
            ls benchmark_results_new
            rm -rf results_
            mkdir results_

      - name: Run comparison (Push)
        if: ${{github.event_name == 'push'}}
        run: python3 script/compare.py benchmark_results_new/run_*.json -o benchmark_results_old/stats_file.json -i results_/issue.md -w results_/wiki.md -gr results_/performance_metrics.svg -g ${{ github.sha }} -r $GITHUB_REPOSITORY

      - name: Run comparison (PR)
        if: ${{github.event_name == 'pull_request'}}
        run: python3 script/compare.py benchmark_results_new/run_*.json -o benchmark_results_old/stats_file.json -i results_/issue.md -w results_/wiki.md -gr results_/performance_metrics.svg -g ${{ github.event.pull_request.head.sha }} -r $GITHUB_REPOSITORY

      - name: Deploy results to git
        if: ${{github.event_name == 'push'}}
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./benchmark_results_old
          publish_branch: benchmark_results
          enable_jekyll: true

      - name: uploading benchmark_results
        uses: actions/upload-artifact@v2
        with:
          name: stats_file.json

          path: benchmark_results_old/stats_file.json

      - name: uploading image
        uses: actions/upload-artifact@v2
        with:
          name: performance_metrics.svg
          path: results_/performance_metrics.svg

      - name: Upload comment text
        uses: actions/upload-artifact@v2
        with:
          name: issue.md

          path: results_/issue.md

      - name: Upload wiki text
        uses: actions/upload-artifact@v2
        with:
          name: wiki.md
          path: results_/wiki.md

#  display-push:
#    needs: compare_mips
#    runs-on: ubuntu-latest
#    if: ${{github.event_name == 'push'}}
#
#    steps:
#      - name: Get comment text
#        uses: actions/download-artifact@v2
#        with:
#          name: issue.md
#
#      - name: Load comment body
#        id: get-comment-body
#        run: |
#          body=$(cat issue.md)
#          body="${body//'%'/'%25'}"
#          body="${body//$'\n'/'%0A'}"
#          body="${body//$'\r'/'%0D'}"
#          echo ::set-output name=body::$body
#      - name: Find Comment
#        uses: peter-evans/find-comment@v1
#        id: fc
#        with:
#          issue-number: 19
#
#          body-includes: This comment was created automatically, please do not change!
#
#      - name: Create comment
#        if: ${{ steps.fc.outputs.comment-id == 0 }}
#        uses: peter-evans/create-or-update-comment@v1
#        with:
#          issue-number: 19
#          edit-mode: replace
#          body: ${{ steps.get-comment-body.outputs.body }}
#
#      - name: Update comment
#        if: ${{ steps.fc.outputs.comment-id != 0 }}
#        uses: peter-evans/create-or-update-comment@v1
#        with:
#          comment-id: ${{ steps.fc.outputs.comment-id }}
#          edit-mode: replace
#          body: ${{ steps.get-comment-body.outputs.body }}

  display-pr:
    needs: compare_mips
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'pull_request'}}

    steps:
      - name: Get comment text
        uses: actions/download-artifact@v2
        with:
          name: issue.md

      - name: Load comment body
        id: get-comment-body
        run: |
          body=$(cat issue.md)
          body="${body//'%'/'%25'}"
          body="${body//$'\n'/'%0A'}"
          body="${body//$'\r'/'%0D'}"
          echo ::set-output name=body::$body

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{github.event.number}}
          body-includes: This comment was created automatically, please do not change!

      - name: Create comment
        if: ${{ steps.fc.outputs.comment-id == 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{github.event.number}}
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}

      - name: Update comment
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          edit-mode: replace
          body: ${{ steps.get-comment-body.outputs.body }}



  display-wiki:
    needs: compare_mips
    runs-on: ubuntu-latest
    if: ${{github.event_name == 'push'}}

    steps:
      - name: Get comment text
        uses: actions/download-artifact@v2
        with:
          name: wiki.md

      - name: Get performance_metrics.svg
        uses: actions/download-artifact@v2
        with:
          name: performance_metrics.svg

      - name: Update wiki
        run: |
          echo "Cloning wiki repo https://github.com/$GITHUB_REPOSITORY.wiki.git"
          git clone "https://$GITHUB_ACTOR:${{ secrets.GITHUB_TOKEN }}@github.com/$GITHUB_REPOSITORY.wiki.git" "wiki"
          cd wiki
          git config user.name "$GITHUB_ACTOR"
          git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
          rm -rf ./performance_metrics.svg
          cp ../wiki.md ./Performance_Metrics.md
          cp ../performance_metrics.svg ./performance_metrics.svg
          git add Performance_Metrics.md performance_metrics.svg
          git commit -m "update perf"
          git push

  delete-artifact:
    if: always()
    needs: [display-wiki, display-pr, test]
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Delete Artifact
        uses: geekyeggo/delete-artifact@1-glob-support
        with:
          name: "*"
          useGlob: true
